<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:sws="http://www.springframework.org/schema/web-services"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/web-services
      	http://www.springframework.org/schema/web-services/web-services.xsd
      	http://www.springframework.org/schema/data/jpa
    	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
    	http://www.springframework.org/schema/jee 
      	http://www.springframework.org/schema/jee/spring-jee.xsd
      	http://www.springframework.org/schema/tx 
      	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- MASTER DB RELATED CONFIGURATIONS (MULTITENANCY) -->
	<bean id="appProps"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:hibernate-async.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<bean id="masterDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="url" value="${db.url}" />
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="initialSize" value="${db.initialSize}" />
		<property name="removeAbandoned" value="${db.removeAbandoned}" />
		<property name="maxActive" value="${db.maxActive}" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="SELECT 1 FROM DUMMY" />
		<property name="maxIdle" value="${db.maxIdle}" />
		<property name="minIdle" value="${db.minIdle}" />
		<property name="logAbandoned" value="true" />
	</bean>

	<bean id="masterEMFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		primary="true">
		<property name="dataSource" ref="masterDataSource" />
		<property name="persistenceUnitName" value="masterDataUnit" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan"
			value="com.ey.advisory.core.async.domain.master,com.ey.advisory.gstnapi.domain.master" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaDialect">
			<bean id="jpaDialect"
				class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<property name="jpaProperties">
			<props>
				<!-- <prop key="hibernate.hbm2ddl.auto">validate</prop> <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop> -->

				<prop key="hibernate.bytecode.use_reflection_optimizer">false</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.HANAColumnStoreDialect</prop>
				<!-- <prop key="hibernate.cache.use_second_level_cache">true</prop> <prop 
					key="hibernate.cache.use_query_cache">true</prop> <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop> --><!-- <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory</prop> -->
				<prop key="hibernate.generate_statistics">true</prop>

				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.default_schema">MASTER</prop>
				<!-- <prop key="hibernate.default_schema">${ssdt.defaultSchema}</prop> -->
				<prop key="current_session_context_class">thread</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.connection.defaultNChar">false</prop>
				<prop key="hibernate.jdbc.batch_versioned_data">true</prop>

			</props>
		</property>
	</bean>


	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="masterTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="masterEMFactory" />
	</bean>

	<jpa:repositories
		base-package="com.ey.advisory.core.async.repositories.master,com.ey.advisory.gstnapi.repositories.master"
		entity-manager-factory-ref="masterEMFactory" transaction-manager-ref="masterTransactionManager" />

	<tx:annotation-driven transaction-manager="masterTransactionManager" />

	<!-- END OF MASTER DB RELATED CONFIGURATIONS (MULTITENANCY) -->

	<!-- CLIENT DB RELATED CONFIGURATIONS (MULTITENANCY) -->

	<!-- Used for configuring a tomcat pool. Any properties applicable for tomcat 
		pool can be configured here. Since we have a multi-tenant DB, individual 
		connection pools need to be maintained, one for each client DB. So, the properties 
		that vary across clients, like - DB URL, connection user name and connection 
		password will be maintained as part of client configuration in the database. 
		But other properties that are common across the clients like connection pool 
		size configuration can be configured here. Depending on the type of connection 
		pool library used, there can be different sets of configurations available. 
		This particular set of properties is for tomcat pool configuration. During 
		runtime, a new instance of PoolProperties will be created and all values 
		from here will be copied to the new one. Apart from this, the properties 
		stored in the DB as well, will be copied to the new one. After gathering 
		all the common and client specifiec properties into a single PoolProperties 
		instance, a Tomcat DataSource object will be created using this PoolProperties 
		object. -->
	<bean id="tomcatConnPoolProperties" class="org.apache.tomcat.jdbc.pool.PoolProperties"
		scope="prototype">
		<property name="driverClassName" value="com.sap.db.jdbc.Driver" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="SELECT 1 FROM DUMMY" />
		<property name="maxActive" value="100" />
		<property name="initialSize" value="10" />
		<property name="maxIdle" value="10" />
		<property name="minIdle" value="5" />
		<property name="logAbandoned" value="true" />
		<property name="maxWait" value="120000" />
	</bean>

	<bean id="clientEMFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

		<property name="persistenceUnitName" value="clientDataUnit" />
		<property name="packagesToScan" value="com.ey.advisory" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaDialect">
			<bean id="jpaDialect"
				class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>

		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.dialect" value="org.hibernate.dialect.HANAColumnStoreDialect" />
				<entry key="hibernate.show_sql" value="false" />
				<entry key="hibernate.current_session_context_class"
					value="org.springframework.orm.hibernate5.SpringSessionContext" />
				<entry key="hibernate.multi_tenant_connection_provider"
					value-ref="tenantConnectionProviderImpl" />
				<entry key="hibernate.tenant_identifier_resolver" value-ref="tenantIdentifierResolverImpl" />
				<entry key="hibernate.multiTenancy" value="DATABASE" />
			</map>
		</property>
	</bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="clientTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="clientEMFactory" />
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>

	<jpa:repositories
		base-package="com.ey.advisory.sap.repositories.client,com.ey.advisory.gstnapi.repositories.client,com.ey.advisory.repositories.client"
		entity-manager-factory-ref="clientEMFactory" transaction-manager-ref="clientTransactionManager" />

	<tx:annotation-driven transaction-manager="clientTransactionManager"
		proxy-target-class="true" />

</beans>