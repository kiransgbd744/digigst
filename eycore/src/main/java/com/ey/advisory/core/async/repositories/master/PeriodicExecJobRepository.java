package com.ey.advisory.core.async.repositories.master;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.ey.advisory.core.async.domain.master.PeriodicExecJob;

/**
 * This class represents the repository of periodic jobs. The periodic job
 * runner iterates over each active and valid job in this repository
 * periodically and evaluates if the current time is suitable for its execution
 * (by evaluating the CRON pattern for that job). If it finds that a job is
 * ready for execution, then it creates an actual AsyncExecJob instance and post
 * it in the AsyncExecJobRepository so that an AsyncExec thread can pick it up
 * and process it. At the time of creation and submission of an actual job, the
 * job runner updates the corresponding periodic job with the details of the
 * actual job (like actual job id and the submission time). Similarly, when the
 * job execution completes, the AsyncExec framework locates the periodic job
 * corresponding to the actual job and updates it with the completion status.
 * 
 * The methods in this repository aids the job runner in achieving the above
 * flow.
 * 
 * @author Sai.Pakanati
 *
 */
@Repository
@Transactional(value = "masterTransactionManager", propagation = Propagation.REQUIRED, readOnly = false)
public interface PeriodicExecJobRepository
		extends JpaRepository<PeriodicExecJob, Long>,
		JpaSpecificationExecutor<PeriodicExecJob> {

	/**
	 * Locate the periodic execution job by the id.
	 */
	public Optional<PeriodicExecJob> findById(@Param("id") Long id);

	/**
	 * Get a Stream of Periodic Jobs to be executed. This method selects all
	 * Active jobs where the specified date falls between the job's validity
	 * start and end dates.
	 * 
	 * @return
	 */
	@Query("select job from PeriodicExecJob job where job.isActive = true "
			+ "and job.validityStDate <= :date and "
			+ "job.validityEndDate >= :date")
	public List<PeriodicExecJob> findActiveAndValidPeriodicJobs(
			@Param("date") Date date);

	/**
	 * This method is used when an actual job generated by a periodic job is
	 * complete. Only then this will be marked as zero.
	 * 
	 * @param periodicJobId
	 *            The id of the periodic job
	 * @param date
	 *            the date/time at which the actual job generated by this
	 *            periodic job was completed.
	 * @return the number of entities that were updated as a aresult of
	 *         execution of the underlying query.List
	 */
	@Modifying
	@Query("Update PeriodicExecJob job set job.updatedDate = :date, "
			+ "job.jobCompletionDate = :date where job.id = :periodicJobId")
	public int markJobCompletion(@Param("periodicJobId") Long periodicJobId,
			@Param("date") Date date);

	@Modifying
	@Query("Update PeriodicExecJob job set job.lastPostedDate = NULL, "
			+ "job.jobCompletionDate = NULL, job.jobstartDate = NULL , "
			+ "job.lastPostedJobId=0, job.updatedDate=NULL where job.id = :periodicJobId")
	public int resetPeriodicJobById(
			@Param("periodicJobId") Long periodicJobId);
	
	@Modifying
	@Query("Update PeriodicExecJob job set job.lastPostedDate = NULL, "
			+ "job.jobCompletionDate = NULL, job.jobstartDate = NULL , "
			+ "job.lastPostedJobId=0, job.updatedDate=NULL")
	public int resetPeriodicJobs();


	/**
	 * This method is used after creating and submitting an actual job instance
	 * for a periodic job. This is done when the periodic job runner detects
	 * that a periodic job's frequency pattern evaluates to true for the current
	 * time. When this happens, the periodic job runner creates and submits an
	 * actual job and then invokes this method to update the period job entity
	 * with the details of the actual job. The submission details will be later
	 * used to mark the job as completed.
	 * 
	 * @param periodicJobId
	 *            the id of the periodic job for which we're marking the job
	 *            submission using this method.
	 * @param actualJobId
	 *            the job id of the actual job created and submitted by the
	 *            periodic job runner.
	 * 
	 * @param date
	 *            the date at which the actual job was submitted.
	 * @return
	 */
	@Modifying
	@Query("Update PeriodicExecJob job set job.updatedDate = :date, "
			+ "job.updatedDate = :date, job.lastPostedJobId = :actualJobId,"
			+ "job.lastPostedDate = :date where job.id = :periodicJobId")
	public int markJobSubmission(@Param("periodicJobId") Long periodicJobId,
			@Param("actualJobId") Long actualJobId, @Param("date") Date date);

	public PeriodicExecJob findByJobCategory(String jobName);

	@Modifying
	@Query("Update PeriodicExecJob job set job.lastPostedDate = NULL, "
			+ "job.jobCompletionDate = NULL, job.jobstartDate = NULL , "
			+ "job.lastPostedJobId=0, job.updatedDate=NULL")
	public int resetallPeriodicJobs();
}
