/**
 * 
 */
package com.ey.advisory.app.services.reports;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.ey.advisory.admin.data.repositories.client.GSTNDetailRepository;
import com.ey.advisory.app.data.views.client.Ret1ProcessedSummaryScreenDto;
import com.ey.advisory.app.util.OnboardingConstant;
import com.ey.advisory.common.GenUtil;
import com.ey.advisory.core.dto.Gstr1ReviwSummReportsReqDto;
import com.ey.advisory.core.search.SearchCriteria;

/**
 * @author Sujith.Nanga
 *
 * 
 */
@Component("RetProcessedRecordsScreenDaoImpl")
public class RetProcessedRecordsScreenDaoImpl
		implements Ret1ProcessedScreenDao {

	private static final Logger LOGGER = LoggerFactory
			.getLogger(RetProcessedRecordsScreenDaoImpl.class);

	@Autowired
	@Qualifier("GSTNDetailRepository")
	private GSTNDetailRepository gSTNDetailRepository;

	@PersistenceContext(unitName = "clientDataUnit")
	private EntityManager entityManager;

	@Override
	public List<Object> getRet1ProcessedScrrenReports(SearchCriteria criteria) {
		Gstr1ReviwSummReportsReqDto request = (Gstr1ReviwSummReportsReqDto) criteria;

		String taxperiod = request.getTaxperiod();

		Map<String, List<String>> dataSecAttrs = request.getDataSecAttrs();

		String GSTIN = null;

		List<String> gstinList = null;

		if (!dataSecAttrs.isEmpty()) {
			for (String key : dataSecAttrs.keySet()) {

				if (key.equalsIgnoreCase(OnboardingConstant.GSTIN)) {
					GSTIN = key;
					if (!dataSecAttrs.get(OnboardingConstant.GSTIN).isEmpty()
							&& dataSecAttrs.get(OnboardingConstant.GSTIN)
									.size() > 0) {
						gstinList = dataSecAttrs.get(OnboardingConstant.GSTIN);
					}
				}

			}
		}
		StringBuilder buildQuery = new StringBuilder();

		if (GSTIN != null && !GSTIN.isEmpty()) {
			if (gstinList != null && gstinList.size() > 0) {
				buildQuery.append(" WHERE GSTIN IN :gstinList");
			}
		}

		if (taxperiod != null && !taxperiod.isEmpty()) {
			buildQuery.append(" AND DERIVED_RET_PERIOD = :taxperiod");
		}

		String queryStr = createProcessRecQueryString(buildQuery.toString());
		Query q = entityManager.createNativeQuery(queryStr);

		if (GSTIN != null && !GSTIN.isEmpty()) {
			if (gstinList != null && !gstinList.isEmpty()
					&& gstinList.size() > 0) {
				q.setParameter("gstinList", gstinList);
			}
		}

		if (taxperiod != null && !taxperiod.isEmpty()) {
			int derivedRetPeriod = GenUtil
					.convertTaxPeriodToInt(request.getTaxperiod());
			q.setParameter("taxperiod", derivedRetPeriod);
		}

		/*
		 * String groupcode = TenantContext.getTenantId();
		 * TenantContext.setTenantId(groupcode);
		 */
		List<Object[]> list = q.getResultList();
		return list.parallelStream().map(o -> convertProcessedRecords(o))
				.collect(Collectors.toCollection(ArrayList::new));
	}

	private Ret1ProcessedSummaryScreenDto convertProcessedRecords(
			Object[] arr) {
		Ret1ProcessedSummaryScreenDto obj = new Ret1ProcessedSummaryScreenDto();

		String gstin = String
				.valueOf(arr[0] != null ? arr[0].toString() : null);
		obj.setGstin(gstin);
		//
		obj.setStateCode(arr[2] != null ? arr[2].toString() : null);
		obj.setStateName(arr[3] != null ? arr[3].toString() : null);

		try {
			List<String> regName = gSTNDetailRepository
					.findRegTypeByGstin(gstin);

			if (regName != null && regName.size() > 0) {
				String regTypeName = regName.get(0);
				obj.setRegistrationType(regTypeName.toUpperCase());
			} else {
				obj.setRegistrationType("");
			}
		} catch (Exception e) {
			obj.setRegistrationType("");
			String str = "Gstin not found in Gstin info table, hence setting is empty to RegType -> "
					+ gstin + " Exception is->" + e.getMessage();
			LOGGER.error(str);
		}

		obj.setSaveStatus(arr[5] != null ? arr[5].toString() : null);
		obj.setDateTime(arr[6] != null ? arr[6].toString() : null);
		/*obj.setTotalTaxLiability(arr[7] != null ? arr[7].toString() : null);
		obj.setReverseCharge(arr[8] != null ? arr[8].toString() : null);
		obj.setOtherThanReverseCharge(
				arr[9] != null ? arr[9].toString() : null);
		obj.setNetAvailableITC(arr[10] != null ? arr[10].toString() : null);
		obj.settDS(arr[11] != null ? arr[11].toString() : null);
		obj.settCS(arr[12] != null ? arr[12].toString() : null);*/

		return obj;
	}

	private String createProcessRecQueryString(String buildQuery) {

		return "SELECT GSTIN,DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "STATUS,MAX(STATUS_DATE_TIME) STATUS_DATE_TIME,"
				+ "SUM(RET1_TOTAL_TAX_LIABILITY) RET1_TOTAL_TAX_LIABILITY,"
				+ "SUM(RET1_REVERSECHARGE) RET1_REVERSECHARGE,"
				+ "SUM(RET1_OTHERTHAN_REVERSECHARGE) "
				+ "AS RET1_OTHERTHAN_REVERSECHARGE,SUM(RET1_NET_ITC_AVAILABLE) "
				+ "AS RET1_NET_ITC_AVAILABLE,SUM(RET1_TDS) AS RET1_TDS,"
				+ "SUM(RET1_TCS) AS RET1_TCS FROM( SELECT GSTIN,DERIVED_RET_PERIOD,"
				+ "STATE_CODE,STATE_NAME, REG_TYPE,STATUS,STATUS_DATE_TIME,"
				+ "RET1_TOTAL_TAX_LIABILITY,0 AS RET1_REVERSECHARGE,"
				+ "0 AS RET1_OTHERTHAN_REVERSECHARGE,0 AS RET1_NET_ITC_AVAILABLE,"
				+ "0 AS RET1_TDS, 0 AS RET1_TCS "
				+ "FROM ( SELECT SUPPLIER_GSTIN AS GSTIN,DERIVED_RET_PERIOD,"
				+ "GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 and "
				+ "COUNT(CASE WHEN IS_SAVED_TO_GSTN =true AND OHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' "
				+ "WHEN (COUNT(CASE WHEN OHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE "
				+ "AND OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when OHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'SAVED' WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE = FALSE then 1 ELSE NULL END) < COUNT(CASE "
				+ "WHEN OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'PARTIALLY SAVED' END AS STATUS,MAX(OHDR.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (IFNULL(SUM(CASE WHEN DOC_TYPE='INV' "
				+ "AND AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0) "
				+ "+IFNULL(SUM(CASE WHEN DOC_TYPE='DR' "
				+ "AND AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN "
				+ "DOC_TYPE='CR' AND AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)"
				+ "+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0)) AS RET1_TOTAL_TAX_LIABILITY "
				+ "FROM ANX_OUTWARD_DOC_HEADER OHDR FULL OUTER JOIN GSTIN_INFO GS "
				+ "ON OHDR.SUPPLIER_GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND OHDR.IS_DELETE = FALSE AND AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "AND AN_RETURN_TYPE='ANX1' GROUP BY SUPPLIER_GSTIN,DERIVED_RET_PERIOD,"
				+ "AN_TABLE_SECTION,AN_RETURN_TYPE,GS.STATE_CODE,REG_TYPE,"
				+ "STATE_NAME,OHDR.MODIFIED_ON " + " UNION ALL "
				+ "SELECT UI.GSTIN GSTIN,DERIVED_RET_PERIOD,GS.STATE_CODE STATE_CODE,"
				+ "STATE_NAME, REG_TYPE, CASE WHEN(COUNT(CASE "
				+ "WHEN IS_SENT_TO_GSTN =TRUE AND UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0 and COUNT(CASE WHEN IS_SAVED_TO_GSTN =true "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0) "
				+ "THEN 'NOT INTTIATED' WHEN (COUNT(CASE WHEN UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END)) THEN 'FAILED' "
				+ "WHEN (COUNT(CASE when UI.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND UI.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN UI.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' END AS STATUS,"
				+ "MAX(UI.MODIFIED_ON) AS STATUS_DATE_TIME, (CASE WHEN "
				+ "RETURN_TYPE IN ('3A8') AND RETURN_TYPE='RET-1' THEN (IFNULL(SUM(IGST_AMT),0)"
				+ "+IFNULL(SUM(CGST_AMT),0)+ IFNULL(SUM(SGST_AMT),0)+IFNULL(SUM(CESS_AMT),0)) END) "
				+ "AS RET1_TOTAL_TAX_LIABILITY FROM RET_PROCESSED_USERINPUT "
				+ "UI FULL OUTER JOIN GSTIN_INFO GS ON UI.GSTIN=GS.GSTIN "
				+ "FULL OUTER JOIN MASTER_STATE ST ON ST.STATE_CODE= GS.STATE_CODE "
				+ "WHERE UI.IS_DELETE = FALSE AND RETURN_TYPE='RET-1' AND "
				+ "RETURN_TABLE IN ('3A8') GROUP BY UI.GSTIN,DERIVED_RET_PERIOD,"
				+ "RETURN_TABLE,RETURN_TYPE,GS.STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "UI.MODIFIED_ON UNION ALL SELECT IHDR.CUST_GSTIN AS GSTIN,"
				+ "DERIVED_RET_PERIOD, GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE AND "
				+ "IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 and "
				+ "COUNT(CASE WHEN IS_SAVED_TO_GSTN =true AND IHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' WHEN "
				+ "(COUNT(CASE WHEN IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = COUNT(CASE "
				+ "WHEN GSTN_ERROR =TRUE AND IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when IHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND IHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND IHDR.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN IHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' END AS STATUS,"
				+ "MAX(IHDR.MODIFIED_ON) AS STATUS_DATE_TIME, (IFNULL(SUM(CASE WHEN DOC_TYPE='INV' "
				+ "AND AN_TABLE_SECTION IN ('3H','3I') THEN IFNULL(IGST_AMT,0)"
				+ "+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) + IFNULL(SUM(CASE WHEN DOC_TYPE='DR' "
				+ "AND AN_TABLE_SECTION IN ('3H','3I') THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)"
				+ "+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN DOC_TYPE='CR' "
				+ "AND AN_TABLE_SECTION IN ('3H','3I') THEN IFNULL(IGST_AMT,0)"
				+ "+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0))AS RET1_TOTAL_TAX_LIABILITY "
				+ "FROM ANX_INWARD_DOC_HEADER IHDR FULL OUTER JOIN GSTIN_INFO GS "
				+ "ON IHDR.CUST_GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND IHDR.IS_DELETE = FALSE AND AN_TABLE_SECTION IN ('3H','3I') "
				+ "AND AN_RETURN_TYPE='ANX1' GROUP BY IHDR.CUST_GSTIN,DERIVED_RET_PERIOD,"
				+ "AN_TABLE_SECTION,AN_RETURN_TYPE,GS.STATE_CODE,REG_TYPE,STATE_NAME,"
				+ "IHDR.MODIFIED_ON UNION ALL SELECT GSTIN, DERIVED_RET_PERIOD,"
				+ "STATE_CODE,STATE_NAME,REG_TYPE,STATUS,STATUS_DATE_TIME,"
				+ "SUM (RET1_TOTAL_TAX_LIABILITY) AS RET1_TOTAL_TAX_LIABILITY "
				+ "FROM ( SELECT SUPPLIER_GSTIN AS GSTIN,DERIVED_RET_PERIOD,"
				+ "GS.STATE_CODE STATE_CODE,STATE_NAME, REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE AND "
				+ "OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 and "
				+ "COUNT(CASE WHEN IS_SAVED_TO_GSTN =true AND OHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' WHEN (COUNT(CASE "
				+ "WHEN OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = COUNT(CASE WHEN "
				+ "GSTN_ERROR =TRUE AND OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when OHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND "
				+ "OHDR.IS_DELETE = FALSE then 1 ELSE NULL END) < COUNT(CASE "
				+ "WHEN OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'PARTIALLY SAVED' END AS STATUS , MAX(OHDR.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (IFNULL(SUM(CASE WHEN DOC_TYPE='DR' "
				+ "THEN IFNULL( IGST_AMT,0)+IFNULL( CGST_AMT,0)+IFNULL( SGST_AMT,0)"
				+ "+IFNULL( CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL( CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN DOC_TYPE='CR' "
				+ "THEN IFNULL( IGST_AMT,0)+IFNULL( CGST_AMT,0)"
				+ "+IFNULL( SGST_AMT,0)+IFNULL( CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL( CESS_AMT_ADVALOREM,0) END),0)) AS RET1_TOTAL_TAX_LIABILITY "
				+ "FROM ANX_OUTWARD_DOC_HEADER OHDR FULL OUTER JOIN GSTIN_INFO GS "
				+ "ON OHDR.SUPPLIER_GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND OHDR.IS_DELETE = FALSE AND DOC_TYPE IN ('DR' ,'CR') "
				+ "AND AN_RETURN_TYPE='ANX1' " + " GROUP BY "
				+ "SUPPLIER_GSTIN,DERIVED_RET_PERIOD,GS.STATE_CODE,STATE_NAME,"
				+ "REG_TYPE, OHDR.MODIFIED_ON " + " UNION ALL "
				+ "SELECT UI.GSTIN GSTIN,DERIVED_RET_PERIOD,GS.STATE_CODE STATE_CODE,"
				+ "STATE_NAME, REG_TYPE, CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 and COUNT(CASE "
				+ "WHEN IS_SAVED_TO_GSTN =true AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0) "
				+ "THEN 'NOT INTTIATED' WHEN (COUNT(CASE WHEN UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END)) THEN 'FAILED' "
				+ "WHEN (COUNT(CASE when UI.IS_DELETE = FALSE THEN 1 ELSE NULL END) = COUNT(CASE "
				+ "WHEN IS_SAVED_TO_GSTN =TRUE AND UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'SAVED' WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND UI.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'PARTIALLY SAVED' END AS STATUS,MAX(UI.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME,(IFNULL(SUM(CASE WHEN RETURN_TABLE='3C3' "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT,0) END),0) - IFNULL(SUM(CASE WHEN RETURN_TABLE='3C4' "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT,0) END),0) - IFNULL(SUM(CASE WHEN RETURN_TABLE='3C5' "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT,0) END),0)) AS RET1_TOTAL_TAX_LIABILITY FROM "
				+ "RET_PROCESSED_USERINPUT UI FULL OUTER JOIN GSTIN_INFO GS ON UI.GSTIN=GS.GSTIN "
				+ "FULL OUTER JOIN MASTER_STATE ST ON ST.STATE_CODE= GS.STATE_CODE "
				+ "WHERE UI.IS_DELETE = FALSE AND RETURN_TYPE='RET-1' AND "
				+ "RETURN_TABLE IN ('3C3','3C4','3C5') " + " GROUP BY "
				+ "UI.GSTIN,DERIVED_RET_PERIOD,RETURN_TABLE,GS.STATE_CODE,"
				+ "STATE_NAME,REG_TYPE,UI.MODIFIED_ON) " + " GROUP BY "
				+ "GSTIN,DERIVED_RET_PERIOD, STATE_CODE,STATE_NAME,REG_TYPE,STATUS,"
				+ "STATUS_DATE_TIME) "
				+ " UNION ALL "
				+ "SELECT GSTIN,DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "STATUS,STATUS_DATE_TIME,0 AS RET1_TOTAL_TAX_LIABILITY,RET1_REVERSECHARGE,"
				+ "0 AS RET1_OTHERTHAN_REVERSECHARGE,0 AS RET1_NET_ITC_AVAILABLE,"
				+ "0 AS RET1_TDS, 0 AS RET1_TCS FROM (SELECT CUST_GSTIN AS GSTIN,DERIVED_RET_PERIOD,"
				+ "GS.STATE_CODE STATE_CODE,STATE_NAME, REG_TYPE, CASE "
				+ "WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE AND IHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0 and COUNT(CASE WHEN IS_SAVED_TO_GSTN =true "
				+ "AND IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' "
				+ "WHEN (COUNT(CASE WHEN IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = COUNT(CASE "
				+ "WHEN GSTN_ERROR =TRUE AND IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when IHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND IHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND IHDR.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN IHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' END AS STATUS,MAX(IHDR.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (IFNULL(SUM(CASE WHEN DOC_TYPE='INV' AND "
				+ "AN_TABLE_SECTION IN ('3H','3I') THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)"
				+ "+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) + IFNULL(SUM(CASE WHEN DOC_TYPE='DR' "
				+ "AND AN_TABLE_SECTION IN ('3H','3I') THEN IFNULL(IGST_AMT,0)"
				+ "+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN DOC_TYPE='CR' "
				+ "AND AN_TABLE_SECTION IN ('3H','3I') THEN IFNULL(IGST_AMT,0)"
				+ "+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0)) AS RET1_REVERSECHARGE FROM "
				+ "ANX_INWARD_DOC_HEADER IHDR FULL OUTER JOIN GSTIN_INFO GS ON "
				+ "IHDR.CUST_GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND IHDR.IS_DELETE = FALSE AND AN_TABLE_SECTION IN ('3H','3I') "
				+ "AND AN_RETURN_TYPE='ANX1' " + " GROUP BY "
				+ "CUST_GSTIN,DERIVED_RET_PERIOD,AN_TABLE_SECTION,"
				+ "AN_RETURN_TYPE,GS.STATE_CODE,REG_TYPE,STATE_NAME,IHDR.MODIFIED_ON) "
				+ " UNION ALL "
				+ "SELECT GSTIN,DERIVED_RET_PERIOD, STATE_CODE,STATE_NAME,REG_TYPE,STATUS,"
				+ "STATUS_DATE_TIME, 0 AS RET1_TOTAL_TAX_LIABILITY,0 AS RET1_REVERSECHARGE,"
				+ "RET1_OTHERTHAN_REVERSECHARGE, 0 AS RET1_NET_ITC_AVAILABLE,"
				+ "0 AS RET1_TDS, 0 AS RET1_TCS FROM (SELECT SUPPLIER_GSTIN AS GSTIN,"
				+ "DERIVED_RET_PERIOD,GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE AND "
				+ "OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 and "
				+ "COUNT(CASE WHEN IS_SAVED_TO_GSTN =true AND OHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' WHEN (COUNT(CASE "
				+ "WHEN OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = COUNT(CASE "
				+ "WHEN GSTN_ERROR =TRUE AND OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when OHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND OHDR.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN OHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' END AS STATUS,MAX(OHDR.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (IFNULL(SUM(CASE WHEN DOC_TYPE='INV' AND "
				+ "AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0) "
				+ "+ IFNULL(SUM(CASE WHEN DOC_TYPE='DR' AND "
				+ "AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN "
				+ "DOC_TYPE='CR' AND AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0)) "
				+ "AS RET1_OTHERTHAN_REVERSECHARGE FROM ANX_OUTWARD_DOC_HEADER OHDR "
				+ "FULL OUTER JOIN GSTIN_INFO GS ON OHDR.SUPPLIER_GSTIN=GS.GSTIN "
				+ "FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND OHDR.IS_DELETE = FALSE AND AN_TABLE_SECTION IN ('3A','3B','3C','3D','3E','3F','3G') "
				+ "AND AN_RETURN_TYPE='ANX1' GROUP BY SUPPLIER_GSTIN,"
				+ "DERIVED_RET_PERIOD,AN_TABLE_SECTION,AN_RETURN_TYPE,GS.STATE_CODE,"
				+ "REG_TYPE,STATE_NAME, OHDR.MODIFIED_ON UNION ALL SELECT UI.GSTIN GSTIN,"
				+ "DERIVED_RET_PERIOD, GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE AND UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0 and COUNT(CASE WHEN IS_SAVED_TO_GSTN =true "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' "
				+ "WHEN (COUNT(CASE WHEN UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = COUNT(CASE "
				+ "WHEN GSTN_ERROR =TRUE AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when UI.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND UI.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'PARTIALLY SAVED' END AS STATUS , MAX(UI.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (CASE WHEN RETURN_TYPE IN ('3A8') "
				+ "AND RETURN_TYPE='RET-1' THEN (IFNULL(SUM(IGST_AMT),0)"
				+ "+IFNULL(SUM(CGST_AMT),0)+ IFNULL(SUM(SGST_AMT),0)"
				+ "+IFNULL(SUM(CESS_AMT),0)) END) AS RET1_OTHERTHAN_REVERSECHARGE "
				+ "FROM RET_PROCESSED_USERINPUT UI FULL OUTER JOIN GSTIN_INFO GS ON "
				+ "UI.GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE UI.IS_DELETE = FALSE "
				+ "AND RETURN_TYPE='RET-1' AND RETURN_TABLE IN ('3A8') "
				+ " GROUP BY "
				+ "UI.GSTIN, DERIVED_RET_PERIOD, RETURN_TABLE,RETURN_TYPE,"
				+ "GS.STATE_CODE,STATE_NAME, REG_TYPE, UI.MODIFIED_ON "
				+ " UNION ALL "
				+ "SELECT GSTIN,DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "STATUS,STATUS_DATE_TIME,SUM (RET1_OTHERTHAN_REVERSECHARGE) "
				+ "AS RET1_OTHERTHAN_REVERSECHARGE FROM ( SELECT SUPPLIER_GSTIN AS GSTIN,"
				+ "DERIVED_RET_PERIOD,GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 "
				+ "and COUNT(CASE WHEN IS_SAVED_TO_GSTN =true AND OHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' WHEN (COUNT(CASE WHEN "
				+ "OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE "
				+ "AND OHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) "
				+ "THEN 'FAILED' WHEN (COUNT(CASE when OHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND "
				+ "OHDR.IS_DELETE = FALSE then 1 ELSE NULL END) < COUNT(CASE WHEN "
				+ "OHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' "
				+ "END AS STATUS , MAX(OHDR.MODIFIED_ON) AS STATUS_DATE_TIME,"
				+ "(IFNULL(SUM(CASE WHEN DOC_TYPE='DR' THEN IFNULL( IGST_AMT,0)"
				+ "+IFNULL( CGST_AMT,0)+IFNULL( SGST_AMT,0)+IFNULL( CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL( CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN DOC_TYPE='CR' "
				+ "THEN IFNULL( IGST_AMT,0)+IFNULL( CGST_AMT,0)+IFNULL( SGST_AMT,0)"
				+ "+IFNULL( CESS_AMT_SPECIFIC,0)+IFNULL( CESS_AMT_ADVALOREM,0) END),0)) "
				+ "AS RET1_OTHERTHAN_REVERSECHARGE FROM ANX_OUTWARD_DOC_HEADER "
				+ "OHDR FULL OUTER JOIN GSTIN_INFO GS ON "
				+ "OHDR.SUPPLIER_GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND OHDR.IS_DELETE = FALSE AND DOC_TYPE IN ('DR' ,'CR') "
				+ "AND AN_RETURN_TYPE='ANX1' GROUP BY SUPPLIER_GSTIN,DERIVED_RET_PERIOD,"
				+ "RETURN_PERIOD ,GS.STATE_CODE,STATE_NAME, REG_TYPE,"
				+ "OHDR.MODIFIED_ON UNION ALL SELECT UI.GSTIN GSTIN,"
				+ "DERIVED_RET_PERIOD, GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE AND "
				+ "UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 and COUNT(CASE "
				+ "WHEN IS_SAVED_TO_GSTN =true AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0) "
				+ "THEN 'NOT INTTIATED' WHEN (COUNT(CASE WHEN UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END)) THEN 'FAILED' "
				+ "WHEN (COUNT(CASE when UI.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE = FALSE then 1 ELSE NULL END) < COUNT(CASE "
				+ "WHEN UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN "
				+ " 'PARTIALLY SAVED' END AS STATUS , MAX(UI.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (IFNULL(SUM(CASE WHEN RETURN_TABLE='3C3' "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT,0) END),0) - IFNULL(SUM(CASE WHEN RETURN_TABLE='3C4' "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT,0) END),0) - IFNULL(SUM(CASE WHEN RETURN_TABLE='3C5' "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT,0) END),0)) AS RET1_OTHERTHAN_REVERSECHARGE "
				+ "FROM RET_PROCESSED_USERINPUT UI FULL OUTER JOIN "
				+ "GSTIN_INFO GS ON UI.GSTIN=GS.GSTIN FULL OUTER JOIN "
				+ "MASTER_STATE ST ON ST.STATE_CODE= GS.STATE_CODE WHERE "
				+ "UI.IS_DELETE = FALSE AND RETURN_TYPE='RET-1' AND "
				+ "RETURN_TABLE IN ('3C3','3C4','3C5') " + " GROUP BY "
				+ "UI.GSTIN,DERIVED_RET_PERIOD,RETURN_TABLE,GS.STATE_CODE,STATE_NAME,"
				+ "REG_TYPE, UI.MODIFIED_ON ) GROUP BY GSTIN, DERIVED_RET_PERIOD,"
				+ "STATUS,STATE_CODE,STATE_NAME, REG_TYPE,STATUS_DATE_TIME) "
				+ " UNION ALL "
				+ "SELECT GSTIN,DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "STATUS,STATUS_DATE_TIME,0 AS RET1_TOTAL_TAX_LIABILITY,0 "
				+ "AS RET1_REVERSECHARGE, 0 AS RET1_OTHERTHAN_REVERSECHARGE,"
				+ "RET1_NET_ITC_AVAILABLE,0 AS RET1_TDS, 0 AS RET1_TCS "
				+ "FROM ( SELECT GSTIN, DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,"
				+ "REG_TYPE,STATUS,STATUS_DATE_TIME,SUM(RET1_NET_ITC_AVAILABLE) "
				+ "RET1_NET_ITC_AVAILABLE FROM (SELECT CUST_GSTIN AS GSTIN,DERIVED_RET_PERIOD,"
				+ "GS.STATE_CODE STATE_CODE,STATE_NAME,REG_TYPE,CASE WHEN(COUNT(CASE "
				+ "WHEN IS_SENT_TO_GSTN =TRUE AND IHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0 and COUNT(CASE WHEN IS_SAVED_TO_GSTN =true "
				+ "AND IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0) "
				+ "THEN 'NOT INTTIATED' WHEN (COUNT(CASE WHEN IHDR.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE AND "
				+ "IHDR.IS_DELETE =FALSE THEN 1 ELSE NULL END)) THEN 'FAILED' "
				+ "WHEN (COUNT(CASE when IHDR.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND IHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND "
				+ "IHDR.IS_DELETE = FALSE then 1 ELSE NULL END) < COUNT(CASE "
				+ "WHEN IHDR.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' "
				+ "END AS STATUS , MAX(IHDR.MODIFIED_ON) AS STATUS_DATE_TIME,"
				+ "(IFNULL(SUM(CASE WHEN DOC_TYPE='INV' AND "
				+ "AN_TABLE_SECTION IN ('3H','3I','3J','3K','4A10','4A11') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0) "
				+ "+ IFNULL(SUM(CASE WHEN DOC_TYPE='DR' "
				+ "AND AN_TABLE_SECTION IN ('3H','3I','3J','3K','4A10','4A11') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE "
				+ "WHEN DOC_TYPE='CR' AND AN_TABLE_SECTION IN ('3H','3I','3J','3K','4A10','4A11') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0))- (IFNULL(SUM(CASE "
				+ "WHEN DOC_TYPE='INV' AND AN_TABLE_SECTION IN ('4B2','4B3') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)+IFNULL(CESS_AMT_ADVALOREM,0) END),0) "
				+ "+ IFNULL(SUM(CASE WHEN DOC_TYPE='DR' AND AN_TABLE_SECTION IN ('4B2','4B3') "
				+ "THEN IFNULL(IGST_AMT,0)+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)"
				+ "+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0) - IFNULL(SUM(CASE WHEN DOC_TYPE='CR' "
				+ "AND AN_TABLE_SECTION IN ('4B2','4B3') THEN IFNULL(IGST_AMT,0)"
				+ "+IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT_SPECIFIC,0)"
				+ "+IFNULL(CESS_AMT_ADVALOREM,0) END),0)) AS RET1_NET_ITC_AVAILABLE "
				+ "FROM ANX_INWARD_DOC_HEADER IHDR FULL OUTER JOIN GSTIN_INFO GS "
				+ "ON IHDR.CUST_GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE IS_PROCESSED = TRUE "
				+ "AND IHDR.IS_DELETE = FALSE AND "
				+ "AN_TABLE_SECTION IN ('3H','3I','3J','3K','4A10','4A11','4B2','4B3') "
				+ " GROUP BY "
				+ "CUST_GSTIN,DERIVED_RET_PERIOD,AN_TABLE_SECTION,AN_RETURN_TYPE,"
				+ "GS.STATE_CODE,REG_TYPE,STATE_NAME, IHDR.MODIFIED_ON "
				+ " UNION ALL "
				+ "SELECT UI.GSTIN GSTIN,DERIVED_RET_PERIOD,GS.STATE_CODE STATE_CODE,"
				+ "STATE_NAME, REG_TYPE,CASE WHEN(COUNT(CASE WHEN IS_SENT_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END) = 0 "
				+ "and COUNT(CASE WHEN IS_SAVED_TO_GSTN =true AND UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = 0) THEN 'NOT INTTIATED' "
				+ "WHEN (COUNT(CASE WHEN UI.IS_DELETE =FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN GSTN_ERROR =TRUE "
				+ "AND UI.IS_DELETE =FALSE THEN 1 ELSE NULL END)) THEN 'FAILED' "
				+ "WHEN (COUNT(CASE when UI.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END) = COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE "
				+ "AND UI.IS_DELETE = FALSE THEN 1 ELSE NULL END)) THEN 'SAVED' "
				+ "WHEN (COUNT(CASE WHEN IS_SAVED_TO_GSTN =TRUE AND UI.IS_DELETE = FALSE "
				+ "then 1 ELSE NULL END) < COUNT(CASE WHEN UI.IS_DELETE = FALSE "
				+ "THEN 1 ELSE NULL END)) THEN 'PARTIALLY SAVED' END AS STATUS,MAX(UI.MODIFIED_ON) "
				+ "AS STATUS_DATE_TIME, (IFNULL(SUM(CASE "
				+ "WHEN RETURN_TABLE IN ('4A4','4A10','4A11') THEN "
				+ "IFNULL( IGST_AMT,0)+IFNULL( CGST_AMT,0)+IFNULL( SGST_AMT,0)"
				+ "+IFNULL( CESS_AMT,0) END),0) - IFNULL(SUM(CASE WHEN RETURN_TABLE IN ('4B2','4B3','4B4','4B4') "
				+ "THEN IFNULL( IGST_AMT,0)+IFNULL( CGST_AMT,0)+IFNULL( SGST_AMT,0)"
				+ "+IFNULL( CESS_AMT,0) END),0)) AS RET1_NET_ITC_AVAILABLE FROM "
				+ "RET_PROCESSED_USERINPUT UI FULL OUTER JOIN GSTIN_INFO GS "
				+ "ON UI.GSTIN=GS.GSTIN FULL OUTER JOIN MASTER_STATE ST "
				+ "ON ST.STATE_CODE= GS.STATE_CODE WHERE UI.IS_DELETE = FALSE "
				+ "AND RETURN_TYPE='RET-1' AND RETURN_TABLE IN ('4A4','4A10','4A11','4B2','4B3','4B4','4B4') "
				+ " GROUP BY "
				+ "UI.GSTIN,DERIVED_RET_PERIOD,RETURN_TABLE,GS.STATE_CODE,STATE_NAME,"
				+ "REG_TYPE,UI.MODIFIED_ON ) GROUP BY GSTIN,DERIVED_RET_PERIOD,"
				+ "STATUS,STATE_CODE,STATE_NAME, REG_TYPE,STATUS_DATE_TIME) "
				+ " UNION ALL "
				+ "SELECT GSTIN,DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,REG_TYPE,"
				+ "STATUS,STATUS_DATE_TIME,0 AS RET1_TOTAL_TAX_LIABILITY,"
				+ "0 AS RET1_REVERSECHARGE,0 AS RET1_OTHERTHAN_REVERSECHARGE,"
				+ "0 AS RET1_NET_ITC_AVAILABLE,RET1_TDS, 0 AS RET1_TCS "
				+ "FROM (SELECT TDS.GSTIN GSTIN,DERIVED_RET_PERIOD,GS.STATE_CODE STATE_CODE,"
				+ "STATE_NAME, REG_TYPE,'' STATUS,MAX(TDS.MODIFIED_ON) STATUS_DATE_TIME,"
				+ "(CASE WHEN GET_TABLE_SECTION IN ('TDS' ) THEN (IFNULL(SUM( TDS.IGST_AMT),0)"
				+ "+IFNULL(SUM( TDS.CGST_AMT),0)+IFNULL(SUM( TDS.SGST_AMT),0)) END ) "
				+ "AS RET1_TDS FROM GETRET1_TABLE5 TDS FULL OUTER JOIN "
				+ "GSTIN_INFO GS ON TDS.GSTIN=GS.GSTIN FULL OUTER JOIN "
				+ "MASTER_STATE ST ON ST.STATE_CODE= GS.STATE_CODE WHERE TDS.IS_DELETE = FALSE "
				+ "AND GET_TABLE_SECTION IN ('TDS') " + " GROUP BY "
				+ "TDS.GSTIN,DERIVED_RET_PERIOD,GET_TABLE_SECTION,"
				+ "GS.STATE_CODE,STATE_NAME,REG_TYPE,TDS.MODIFIED_ON ) "
				+ " UNION ALL "
				+ "SELECT GSTIN,DERIVED_RET_PERIOD,STATE_CODE,STATE_NAME,"
				+ "REG_TYPE,STATUS,STATUS_DATE_TIME,0 AS RET1_TOTAL_TAX_LIABILITY,"
				+ "0 AS RET1_REVERSECHARGE, 0 AS RET1_OTHERTHAN_REVERSECHARGE,"
				+ "0 AS RET1_NET_ITC_AVAILABLE,0 AS RET1_TDS,RET1_TCS "
				+ "FROM (SELECT TCS.GSTIN GSTIN,DERIVED_RET_PERIOD,"
				+ "GS.STATE_CODE STATE_CODE,STATE_NAME, REG_TYPE,'' STATUS,"
				+ "MAX(TCS.MODIFIED_ON) STATUS_DATE_TIME,(CASE WHEN "
				+ "GET_TABLE_SECTION IN ('TCS' ) THEN (IFNULL(SUM( TCS.IGST_AMT),0)"
				+ "+IFNULL(SUM( TCS.CGST_AMT),0)+IFNULL(SUM( TCS.SGST_AMT),0)) END ) "
				+ "AS RET1_TCS FROM GETRET1_TABLE5 TCS FULL OUTER JOIN "
				+ "GSTIN_INFO GS ON TCS.GSTIN=GS.GSTIN FULL OUTER JOIN "
				+ "MASTER_STATE ST ON ST.STATE_CODE= GS.STATE_CODE "
				+ "WHERE TCS.IS_DELETE = FALSE AND GET_TABLE_SECTION IN ('TCS') "
				+ " GROUP BY "
				+ "TCS.GSTIN,DERIVED_RET_PERIOD, GET_TABLE_SECTION,GS.STATE_CODE,"
				+ "STATE_NAME, REG_TYPE, TCS.MODIFIED_ON ) ) " + buildQuery
				+ " GROUP BY " + "GSTIN, DERIVED_RET_PERIOD, STATE_CODE,"
				+ "STATE_NAME, REG_TYPE,STATUS,STATUS_DATE_TIME ";
	}
}
