package com.ey.advisory.app.data.daos.client.simplified;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * 
 * @author SriBhavya
 *
 */
@Service("Gstr1AdvancedSectionQueryBuilderImpl")
public class Gstr1AdvancedSectionQueryBuilderImpl
		implements Gstr1AdvancedSectionQueryBuilder {

	private static final Logger LOGGER = LoggerFactory
			.getLogger(Gstr1AdvancedSectionQueryBuilderImpl.class);

	public String createATVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical AT  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,"
				+ "SUM(IGST_AMT)IGST_AMT,SUM(CGST_AMT)CGST_AMT,"
				+ "SUM(SGST_AMT)SGST_AMT,SUM(CESS_AMT)CESS_AMT,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,"
				+ "USERACCESS1,USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID FROM ("
				+ " SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS NEW_TAXABLE_VALUE,"
				+ "IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID FROM GSTR1_PROCESSED_ADV_RECEIVED "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = FALSE "
				+ buildQuery
				+ "GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,PROFIT_CENTRE,PLANT_CODE,"
				+ "DIVISION,LOCATION,SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,"
				+ "USERACCESS1,USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID ) "
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID " + " ORDER BY ID DESC ";
		return queryString;
	}

	public String createATAVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical ATA  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,"
				+ "SUM(IGST_AMT)IGST_AMT,SUM(CGST_AMT)CGST_AMT,"
				+ "SUM(SGST_AMT)SGST_AMT,SUM(CESS_AMT)CESS_AMT,PROFIT_CENTRE,"
				+ "PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE,"
				+ "SUM(ORG_TAXABLE_VALUE)ORG_TAXABLE_VALUE FROM ( "
				+ "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) "
				+ "AS NEW_TAXABLE_VALUE,IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE,"
				+ "IFNULL(SUM(ORG_GROSS_ADV_RECEIVED),0) AS ORG_TAXABLE_VALUE "
				+ " FROM GSTR1_PROCESSED_ADV_RECEIVED "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = TRUE "
				+ buildQuery + " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID,"
				+ "MONTH,ORG_POS,ORG_RATE )"
				+ "GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,PROFIT_CENTRE,"
				+ "PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE "
				+ " ORDER BY ID DESC ";
		return queryString;
	}

	public String createTXPDVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical TXPD  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,"
				+ "SUM(IGST_AMT)IGST_AMT,SUM(CGST_AMT)CGST_AMT,"
				+ "SUM(SGST_AMT)SGST_AMT,SUM(CESS_AMT)CESS_AMT,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID " + " FROM ( "
				+ "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS NEW_TAXABLE_VALUE,"
				+ "IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID"
				+ " FROM GSTR1_PROCESSED_ADV_ADJUSTMENT "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = FALSE "
				+ buildQuery
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,PROFIT_CENTRE,PLANT_CODE,"
				+ "DIVISION,LOCATION,SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,"
				+ "USERACCESS1,USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID )"
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID " + " ORDER BY ID DESC";
		return queryString;
	}

	public String createTXPDAVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical TXPDA  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,SUM(IGST_AMT)IGST_AMT,"
				+ "SUM(CGST_AMT)CGST_AMT,SUM(SGST_AMT)SGST_AMT,"
				+ "SUM(CESS_AMT)CESS_AMT,PROFIT_CENTRE,PLANT_CODE,DIVISION,"
				+ "LOCATION,SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID,"
				+ "MONTH,ORG_POS,ORG_RATE,SUM(ORG_TAXABLE_VALUE)ORG_TAXABLE_VALUE"
				+ " FROM ( " + "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS NEW_TAXABLE_VALUE,"
				+ "IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE,"
				+ "IFNULL(SUM(ORG_GROSS_ADV_ADJUSTED),0) AS ORG_TAXABLE_VALUE"
				+ " FROM GSTR1_PROCESSED_ADV_ADJUSTMENT "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = TRUE "
				+ buildQuery + " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE  ) "
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE "
				+ " ORDER BY ID DESC";
		return queryString;
	}

	@Override
	public String createVeriticalQueryString(String buildQuery,
			String docType) {
		String queryString = null;
		if (docType.equalsIgnoreCase("AT")) {
			queryString = createATVerticalQueryString(buildQuery);
		} else if (docType.equalsIgnoreCase("ATA")) {
			queryString = createATAVerticalQueryString(buildQuery);
		} else if (docType.equalsIgnoreCase("TXPD")) {
			queryString = createTXPDVerticalQueryString(buildQuery);
		} else if (docType.equalsIgnoreCase("TXPDA")) {
			queryString = createTXPDAVerticalQueryString(buildQuery);
		} else {
			queryString = null;
		}
		return queryString;
	}

	@Override
	public String createGstinViewQueryString(String buildVertiQuery,
			String buildTransQuery, String docType) {
		String queryString = null;
		if (docType.equalsIgnoreCase("AT")) {
			queryString = "WITH AT_GSTINVIEW AS (" + "SELECT HDR.POS,"
					+ "IFNULL(HDR.DIFF_PERCENT,'') AS TRAN_TYPE,"
					+ "IFNULL(ITM.TAXABLE_VALUE,0) AS ACCESSABLE_AMT,"
					+ "IFNULL(ITM.IGST_AMT ,0) AS IGST_AMT,"
					+ "IFNULL(ITM.CGST_AMT ,0) AS CGST_AMT,"
					+ "IFNULL(ITM.SGST_AMT ,0) AS SGST_AMT,"
					+ "IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0) AS CESS_AMT "
					+ "FROM ANX_OUTWARD_DOC_HEADER HDR INNER JOIN ANX_OUTWARD_DOC_ITEM ITM ON HDR.ID=ITM.DOC_HEADER_ID WHERE ASP_INVOICE_STATUS = 2 "
					+ "AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('AT')"
					+ buildTransQuery
					+ " UNION ALL SELECT  NEW_POS AS POS, (CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65'  WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END) AS TRAN_TYPE,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS ACCESSABLE_AMT,"
					+ "IFNULL(SUM(IGST_AMT),0) IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0) SGST_AMT,IFNULL(SUM(CESS_AMT),0) CESS_AMT "
					+ "FROM GSTR1_PROCESSED_ADV_RECEIVED WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE"
					+ buildVertiQuery
					+ "GROUP BY (CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END),NEW_POS"
					+ ")"
					+ "SELECT POS,TRAN_TYPE,'' AS TAX_RATE,IFNULL(SUM(ACCESSABLE_AMT),0) AS ACCESSABLE_AMT,IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,IFNULL(SUM(CESS_AMT),0) AS CESS_AMT FROM AT_GSTINVIEW "
					+ "GROUP BY POS,TRAN_TYPE";
		} else if (docType.equalsIgnoreCase("ATA")) {
			queryString = "SELECT   NEW_POS AS POS, (CASE WHEN TRAN_TYPE IN"
					+ " ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN "
					+ "('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END)"
					+ " TRAN_TYPE, '' NEW_RATE,"
					+ " IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS ACCESSABLE_AMT, "
					+ "IFNULL(SUM(IGST_AMT),0)IGST_AMT,IFNULL(SUM(CGST_AMT),0)CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0)SGST_AMT,IFNULL(SUM(CESS_AMT),0)CESS_AMT "
					+ " FROM GSTR1_PROCESSED_ADV_RECEIVED"
					+ " WHERE IS_DELETE=FALSE AND IS_AMENDMENT=TRUE  "
					+ buildVertiQuery + " GROUP BY (CASE WHEN TRAN_TYPE IN "
					+ "('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN "
					+ "('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' "
					+ "END),NEW_POS,MONTH ";
		} else if (docType.equalsIgnoreCase("TXPD")) {
			queryString = "WITH AT_GSTINVIEW AS (" + "SELECT HDR.POS,"
					+ "IFNULL(HDR.DIFF_PERCENT,'') AS TRAN_TYPE,"
					+ "IFNULL(ITM.TAXABLE_VALUE,0) AS ACCESSABLE_AMT,"
					+ "IFNULL(ITM.IGST_AMT ,0) AS IGST_AMT,"
					+ "IFNULL(ITM.CGST_AMT ,0) AS CGST_AMT,"
					+ "IFNULL(ITM.SGST_AMT ,0) AS SGST_AMT,"
					+ "IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0) AS CESS_AMT "
					+ "FROM ANX_OUTWARD_DOC_HEADER HDR INNER JOIN ANX_OUTWARD_DOC_ITEM ITM ON HDR.ID=ITM.DOC_HEADER_ID WHERE ASP_INVOICE_STATUS = 2 "
					+ "AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('TXP')"
					+ buildTransQuery
					+ " UNION ALL SELECT NEW_POS AS POS,(CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END) TRAN_TYPE,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS ACCESSABLE_AMT,"
					+ "IFNULL(SUM(IGST_AMT),0) IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0) SGST_AMT,IFNULL(SUM(CESS_AMT),0) CESS_AMT "
					+ "FROM GSTR1_PROCESSED_ADV_ADJUSTMENT WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE"
					+ buildVertiQuery
					+ "GROUP BY (CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END),NEW_POS"
					+ ")"
					+ "SELECT POS,TRAN_TYPE,'' AS TAX_RATE,IFNULL(SUM(ACCESSABLE_AMT),0) AS ACCESSABLE_AMT,IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,IFNULL(SUM(CESS_AMT),0) AS CESS_AMT FROM AT_GSTINVIEW "
					+ "GROUP BY POS,TRAN_TYPE";
		} else if (docType.equalsIgnoreCase("TXPDA")) {
			queryString = "SELECT   NEW_POS AS POS, (CASE WHEN TRAN_TYPE IN "
					+ "('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN"
					+ " ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END)"
					+ " TRAN_TYPE, '' NEW_RATE,"
					+ " IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS ACCESSABLE_AMT, "
					+ "IFNULL(SUM(IGST_AMT),0)IGST_AMT,IFNULL(SUM(CGST_AMT),0)CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0)SGST_AMT,IFNULL(SUM(CESS_AMT),0)CESS_AMT "
					+ " FROM GSTR1_PROCESSED_ADV_ADJUSTMENT  "
					+ " WHERE IS_DELETE=FALSE AND IS_AMENDMENT=TRUE  "
					+ buildVertiQuery + " GROUP BY (CASE WHEN TRAN_TYPE IN"
					+ " ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE "
					+ "IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' "
					+ "END),NEW_POS,MONTH ";
		} else {
			queryString = null;
		}
		return queryString;
	}

	@Override
	public String createSummaryQueryString(String buildVertiQuery,
			String buildTransQuery, String docType) {
		String queryString = null;
		if ("AT".equalsIgnoreCase(docType)) {
			queryString = "WITH CTE AS (" + "SELECT 'TRANSACTIONAL' AS TYPE,"
					+ "COUNT(DISTINCT (IFNULL(HDR.SUPPLIER_GSTIN,'') ||'|'|| IFNULL(HDR.RETURN_PERIOD,'') ||'|'||IFNULL(HDR.DIFF_PERCENT,'') ||'|'|| IFNULL(HDR.POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(ONB_LINE_ITEM_AMT,0)) AS DOC_AMT,"
					+ "SUM(IFNULL(ITM.TAXABLE_VALUE,0)) AS TAXABLE_VALUE,"
					+ "SUM(IFNULL(ITM.IGST_AMT ,0)) AS IGST_AMT,"
					+ "SUM(IFNULL(ITM.CGST_AMT ,0)) AS CGST_AMT,"
					+ "SUM(IFNULL(ITM.SGST_AMT ,0)) AS SGST_AMT,"
					+ "SUM(IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0)) AS CESS_AMT "
					+ "FROM "
					+ "ANX_OUTWARD_DOC_HEADER HDR INNER JOIN ANX_OUTWARD_DOC_ITEM ITM ON HDR.ID=ITM.DOC_HEADER_ID "
					+ "WHERE ASP_INVOICE_STATUS = 2 AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('AT') "
					+ buildTransQuery + " UNION ALL "
					+ "SELECT 'VERTICAL' AS TYPE ,COUNT (DISTINCT (IFNULL(SUPPLIER_GSTIN,'') ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(NEW_GROSS_ADV_RECEIVED,0)+IFNULL(IGST_AMT,0)+ IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT,0)) AS DOC_AMT,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT, IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
					+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0) AS CESS_AMT "
					+ "FROM GSTR1_PROCESSED_ADV_RECEIVED WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE "
					+ buildVertiQuery + ")"
					+ "SELECT 'TOTAL' AS TYPE,SUM(KEYCOUNT) AS KEYCOUNT,SUM(DOC_AMT) AS DOC_AMT,SUM(TAXABLE_VALUE) AS TAXABLE_VALUE,SUM(IGST_AMT) AS IGST_AMT,"
					+ "SUM(CGST_AMT) CGST_AMT,SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT) CESS_AMT FROM CTE "
					+ "UNION ALL "
					+ "SELECT TYPE,KEYCOUNT,DOC_AMT,TAXABLE_VALUE,IGST_AMT,CGST_AMT,SGST_AMT,CESS_AMT FROM CTE";
		} else if ("ATA".equalsIgnoreCase(docType)) {
			queryString = "SELECT 'VERTICAL' AS TYPE ,COUNT(DISTINCT KEY)"
					+ " KEYCOUNT, SUM(DOC_AMT) DOC_AMT, SUM(TAXABLE_VALUE)"
					+ " TAXABLE_VALUE, SUM(IGST_AMT) IGST_AMT,SUM(CGST_AMT)"
					+ " CGST_AMT, SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT)"
					+ " CESS_AMT FROM( SELECT (IFNULL(SUPPLIER_GSTIN,'')"
					+ " ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL"
					+ "(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999)||'|'||"
					+ "IFNULL(MONTH,9999)) KEY, SUM(IFNULL"
					+ "(NEW_GROSS_ADV_RECEIVED,0)+IFNULL(IGST_AMT,0)+ "
					+ "IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT"
					+ ",0)) AS DOC_AMT, IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0)"
					+ " AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ " IFNULL(SUM(CGST_AMT),0) AS CGST_AMT, IFNULL"
					+ "(SUM(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0)"
					+ " AS CESS_AMT FROM GSTR1_PROCESSED_ADV_RECEIVED WHERE "
					+ "IS_DELETE = FALSE AND IS_AMENDMENT=TRUE "
					+ buildVertiQuery
					+ "GROUP BY SUPPLIER_GSTIN,RETURN_PERIOD,TRAN_TYPE,NEW_POS,MONTH)  ";
		} else if ("TXPD".equalsIgnoreCase(docType)) {
			queryString = "WITH CTE AS (" + "SELECT 'TRANSACTIONAL' AS TYPE,"
					+ "COUNT(DISTINCT (IFNULL(HDR.SUPPLIER_GSTIN,'') ||'|'|| IFNULL(HDR.RETURN_PERIOD,'') ||'|'||IFNULL(HDR.DIFF_PERCENT,'') ||'|'|| IFNULL(HDR.POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(ONB_LINE_ITEM_AMT,0)) AS DOC_AMT,"
					+ "SUM(IFNULL(ITM.TAXABLE_VALUE,0)) AS TAXABLE_VALUE,"
					+ "SUM(IFNULL(ITM.IGST_AMT ,0)) AS IGST_AMT,"
					+ "SUM(IFNULL(ITM.CGST_AMT ,0)) AS CGST_AMT,"
					+ "SUM(IFNULL(ITM.SGST_AMT ,0)) AS SGST_AMT,"
					+ "SUM(IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0)) AS CESS_AMT "
					+ "FROM "
					+ "ANX_OUTWARD_DOC_HEADER HDR INNER JOIN ANX_OUTWARD_DOC_ITEM ITM ON HDR.ID=ITM.DOC_HEADER_ID "
					+ "WHERE ASP_INVOICE_STATUS = 2 AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('TXP') "
					+ buildTransQuery + " UNION ALL "
					+ "SELECT 'VERTICAL' AS TYPE ,COUNT (DISTINCT (IFNULL(SUPPLIER_GSTIN,'') ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(NEW_GROSS_ADV_ADJUSTED,0)+IFNULL(IGST_AMT,0)+ IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT,0)) AS DOC_AMT,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT, IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
					+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0) AS CESS_AMT "
					+ "FROM GSTR1_PROCESSED_ADV_ADJUSTMENT WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE "
					+ buildVertiQuery + ")"
					+ "SELECT 'TOTAL' AS TYPE,SUM(KEYCOUNT) AS KEYCOUNT,SUM(DOC_AMT) AS DOC_AMT,SUM(TAXABLE_VALUE) AS TAXABLE_VALUE,SUM(IGST_AMT) AS IGST_AMT,"
					+ "SUM(CGST_AMT) CGST_AMT,SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT) CESS_AMT FROM CTE "
					+ "UNION ALL "
					+ "SELECT TYPE,KEYCOUNT,DOC_AMT,TAXABLE_VALUE,IGST_AMT,CGST_AMT,SGST_AMT,CESS_AMT FROM CTE";

		} else if ("TXPDA".equalsIgnoreCase(docType)) {
			queryString = "SELECT 'VERTICAL' AS TYPE ,COUNT(DISTINCT KEY) "
					+ "KEYCOUNT, SUM(DOC_AMT) DOC_AMT, SUM(TAXABLE_VALUE) "
					+ "TAXABLE_VALUE, SUM(IGST_AMT) IGST_AMT,SUM(CGST_AMT)"
					+ " CGST_AMT, SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT) "
					+ "CESS_AMT FROM( SELECT (IFNULL(SUPPLIER_GSTIN,'')"
					+ " ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL"
					+ "(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999)||'|'||"
					+ "IFNULL(MONTH,9999)) KEY, SUM(IFNULL"
					+ "(NEW_GROSS_ADV_ADJUSTED,0)+IFNULL(IGST_AMT,0)+ "
					+ "IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT"
					+ ",0)) AS DOC_AMT, IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) "
					+ "AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ " IFNULL(SUM(CGST_AMT),0) AS CGST_AMT, IFNULL(SUM"
					+ "(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0) "
					+ "AS CESS_AMT FROM GSTR1_PROCESSED_ADV_ADJUSTMENT WHERE"
					+ " IS_DELETE = FALSE AND IS_AMENDMENT=TRUE"
					+ buildVertiQuery
					+ " GROUP BY SUPPLIER_GSTIN,RETURN_PERIOD,TRAN_TYPE,NEW_POS,MONTH)";
		} else {
			queryString = null;
		}
		return queryString;
	}
	//gstr1a code
	@Override
	public String createGstr1aSummaryQueryString(String buildVertiQuery,
			String buildTransQuery, String docType) {
		String queryString = null;
		if ("AT".equalsIgnoreCase(docType)) {
			queryString = "WITH CTE AS (" + "SELECT 'TRANSACTIONAL' AS TYPE,"
					+ "COUNT(DISTINCT (IFNULL(HDR.SUPPLIER_GSTIN,'') ||'|'|| IFNULL(HDR.RETURN_PERIOD,'') ||'|'||IFNULL(HDR.DIFF_PERCENT,'') ||'|'|| IFNULL(HDR.POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(ONB_LINE_ITEM_AMT,0)) AS DOC_AMT,"
					+ "SUM(IFNULL(ITM.TAXABLE_VALUE,0)) AS TAXABLE_VALUE,"
					+ "SUM(IFNULL(ITM.IGST_AMT ,0)) AS IGST_AMT,"
					+ "SUM(IFNULL(ITM.CGST_AMT ,0)) AS CGST_AMT,"
					+ "SUM(IFNULL(ITM.SGST_AMT ,0)) AS SGST_AMT,"
					+ "SUM(IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0)) AS CESS_AMT "
					+ "FROM "
					+ "ANX_OUTWARD_DOC_HEADER_1A HDR INNER JOIN ANX_OUTWARD_DOC_ITEM_1A ITM ON HDR.ID=ITM.DOC_HEADER_ID "
					+ "WHERE ASP_INVOICE_STATUS = 2 AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('AT') "
					+ buildTransQuery + " UNION ALL "
					+ "SELECT 'VERTICAL' AS TYPE ,COUNT (DISTINCT (IFNULL(SUPPLIER_GSTIN,'') ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(NEW_GROSS_ADV_RECEIVED,0)+IFNULL(IGST_AMT,0)+ IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT,0)) AS DOC_AMT,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT, IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
					+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0) AS CESS_AMT "
					+ "FROM GSTR1A_PROCESSED_ADV_RECEIVED WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE "
					+ buildVertiQuery + ")"
					+ "SELECT 'TOTAL' AS TYPE,SUM(KEYCOUNT) AS KEYCOUNT,SUM(DOC_AMT) AS DOC_AMT,SUM(TAXABLE_VALUE) AS TAXABLE_VALUE,SUM(IGST_AMT) AS IGST_AMT,"
					+ "SUM(CGST_AMT) CGST_AMT,SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT) CESS_AMT FROM CTE "
					+ "UNION ALL "
					+ "SELECT TYPE,KEYCOUNT,DOC_AMT,TAXABLE_VALUE,IGST_AMT,CGST_AMT,SGST_AMT,CESS_AMT FROM CTE";
		} else if ("ATA".equalsIgnoreCase(docType)) {
			queryString = "SELECT 'VERTICAL' AS TYPE ,COUNT(DISTINCT KEY)"
					+ " KEYCOUNT, SUM(DOC_AMT) DOC_AMT, SUM(TAXABLE_VALUE)"
					+ " TAXABLE_VALUE, SUM(IGST_AMT) IGST_AMT,SUM(CGST_AMT)"
					+ " CGST_AMT, SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT)"
					+ " CESS_AMT FROM( SELECT (IFNULL(SUPPLIER_GSTIN,'')"
					+ " ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL"
					+ "(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999)||'|'||"
					+ "IFNULL(MONTH,9999)) KEY, SUM(IFNULL"
					+ "(NEW_GROSS_ADV_RECEIVED,0)+IFNULL(IGST_AMT,0)+ "
					+ "IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT"
					+ ",0)) AS DOC_AMT, IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0)"
					+ " AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ " IFNULL(SUM(CGST_AMT),0) AS CGST_AMT, IFNULL"
					+ "(SUM(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0)"
					+ " AS CESS_AMT FROM GSTR1A_PROCESSED_ADV_RECEIVED WHERE "
					+ "IS_DELETE = FALSE AND IS_AMENDMENT=TRUE "
					+ buildVertiQuery
					+ "GROUP BY SUPPLIER_GSTIN,RETURN_PERIOD,TRAN_TYPE,NEW_POS,MONTH)  ";
		} else if ("TXPD".equalsIgnoreCase(docType)) {
			queryString = "WITH CTE AS (" + "SELECT 'TRANSACTIONAL' AS TYPE,"
					+ "COUNT(DISTINCT (IFNULL(HDR.SUPPLIER_GSTIN,'') ||'|'|| IFNULL(HDR.RETURN_PERIOD,'') ||'|'||IFNULL(HDR.DIFF_PERCENT,'') ||'|'|| IFNULL(HDR.POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(ONB_LINE_ITEM_AMT,0)) AS DOC_AMT,"
					+ "SUM(IFNULL(ITM.TAXABLE_VALUE,0)) AS TAXABLE_VALUE,"
					+ "SUM(IFNULL(ITM.IGST_AMT ,0)) AS IGST_AMT,"
					+ "SUM(IFNULL(ITM.CGST_AMT ,0)) AS CGST_AMT,"
					+ "SUM(IFNULL(ITM.SGST_AMT ,0)) AS SGST_AMT,"
					+ "SUM(IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0)) AS CESS_AMT "
					+ "FROM "
					+ "ANX_OUTWARD_DOC_HEADER_1A HDR INNER JOIN ANX_OUTWARD_DOC_ITEM_1A ITM ON HDR.ID=ITM.DOC_HEADER_ID "
					+ "WHERE ASP_INVOICE_STATUS = 2 AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('TXP') "
					+ buildTransQuery + " UNION ALL "
					+ "SELECT 'VERTICAL' AS TYPE ,COUNT (DISTINCT (IFNULL(SUPPLIER_GSTIN,'') ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999))) KEYCOUNT,"
					+ "SUM(IFNULL(NEW_GROSS_ADV_ADJUSTED,0)+IFNULL(IGST_AMT,0)+ IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT,0)) AS DOC_AMT,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT, IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
					+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0) AS CESS_AMT "
					+ "FROM GSTR1A_PROCESSED_ADV_ADJUSTMENT WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE "
					+ buildVertiQuery + ")"
					+ "SELECT 'TOTAL' AS TYPE,SUM(KEYCOUNT) AS KEYCOUNT,SUM(DOC_AMT) AS DOC_AMT,SUM(TAXABLE_VALUE) AS TAXABLE_VALUE,SUM(IGST_AMT) AS IGST_AMT,"
					+ "SUM(CGST_AMT) CGST_AMT,SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT) CESS_AMT FROM CTE "
					+ "UNION ALL "
					+ "SELECT TYPE,KEYCOUNT,DOC_AMT,TAXABLE_VALUE,IGST_AMT,CGST_AMT,SGST_AMT,CESS_AMT FROM CTE";

		} else if ("TXPDA".equalsIgnoreCase(docType)) {
			queryString = "SELECT 'VERTICAL' AS TYPE ,COUNT(DISTINCT KEY) "
					+ "KEYCOUNT, SUM(DOC_AMT) DOC_AMT, SUM(TAXABLE_VALUE) "
					+ "TAXABLE_VALUE, SUM(IGST_AMT) IGST_AMT,SUM(CGST_AMT)"
					+ " CGST_AMT, SUM(SGST_AMT) SGST_AMT,SUM(CESS_AMT) "
					+ "CESS_AMT FROM( SELECT (IFNULL(SUPPLIER_GSTIN,'')"
					+ " ||'|'|| IFNULL(RETURN_PERIOD,'') ||'|'||IFNULL"
					+ "(TRAN_TYPE,'') ||'|'||IFNULL(NEW_POS,9999)||'|'||"
					+ "IFNULL(MONTH,9999)) KEY, SUM(IFNULL"
					+ "(NEW_GROSS_ADV_ADJUSTED,0)+IFNULL(IGST_AMT,0)+ "
					+ "IFNULL(CGST_AMT,0)+IFNULL(SGST_AMT,0)+IFNULL(CESS_AMT"
					+ ",0)) AS DOC_AMT, IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) "
					+ "AS TAXABLE_VALUE, IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ " IFNULL(SUM(CGST_AMT),0) AS CGST_AMT, IFNULL(SUM"
					+ "(SGST_AMT),0) AS SGST_AMT, IFNULL(SUM(CESS_AMT),0) "
					+ "AS CESS_AMT FROM GSTR1A_PROCESSED_ADV_ADJUSTMENT WHERE"
					+ " IS_DELETE = FALSE AND IS_AMENDMENT=TRUE"
					+ buildVertiQuery
					+ " GROUP BY SUPPLIER_GSTIN,RETURN_PERIOD,TRAN_TYPE,NEW_POS,MONTH)";
		} else {
			queryString = null;
		}
		return queryString;
	}



	@Override
	public String createGstr1aGstinViewQueryString(String buildVertiQuery,
			String buildTransQuery, String docType) {
		String queryString = null;
		if (docType.equalsIgnoreCase("AT")) {
			queryString = "WITH AT_GSTINVIEW AS (" + "SELECT HDR.POS,"
					+ "IFNULL(HDR.DIFF_PERCENT,'') AS TRAN_TYPE,"
					+ "IFNULL(ITM.TAXABLE_VALUE,0) AS ACCESSABLE_AMT,"
					+ "IFNULL(ITM.IGST_AMT ,0) AS IGST_AMT,"
					+ "IFNULL(ITM.CGST_AMT ,0) AS CGST_AMT,"
					+ "IFNULL(ITM.SGST_AMT ,0) AS SGST_AMT,"
					+ "IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0) AS CESS_AMT "
					+ "FROM ANX_OUTWARD_DOC_HEADER_1A HDR INNER JOIN ANX_OUTWARD_DOC_ITEM_1A ITM ON HDR.ID=ITM.DOC_HEADER_ID WHERE ASP_INVOICE_STATUS = 2 "
					+ "AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('AT')"
					+ buildTransQuery
					+ " UNION ALL SELECT  NEW_POS AS POS, (CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65'  WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END) AS TRAN_TYPE,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS ACCESSABLE_AMT,"
					+ "IFNULL(SUM(IGST_AMT),0) IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0) SGST_AMT,IFNULL(SUM(CESS_AMT),0) CESS_AMT "
					+ "FROM GSTR1A_PROCESSED_ADV_RECEIVED WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE"
					+ buildVertiQuery
					+ "GROUP BY (CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END),NEW_POS"
					+ ")"
					+ "SELECT POS,TRAN_TYPE,'' AS TAX_RATE,IFNULL(SUM(ACCESSABLE_AMT),0) AS ACCESSABLE_AMT,IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,IFNULL(SUM(CESS_AMT),0) AS CESS_AMT FROM AT_GSTINVIEW "
					+ "GROUP BY POS,TRAN_TYPE";
		} else if (docType.equalsIgnoreCase("ATA")) {
			queryString = "SELECT   NEW_POS AS POS, (CASE WHEN TRAN_TYPE IN"
					+ " ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN "
					+ "('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END)"
					+ " TRAN_TYPE, '' NEW_RATE,"
					+ " IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS ACCESSABLE_AMT, "
					+ "IFNULL(SUM(IGST_AMT),0)IGST_AMT,IFNULL(SUM(CGST_AMT),0)CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0)SGST_AMT,IFNULL(SUM(CESS_AMT),0)CESS_AMT "
					+ " FROM GSTR1A_PROCESSED_ADV_RECEIVED"
					+ " WHERE IS_DELETE=FALSE AND IS_AMENDMENT=TRUE  "
					+ buildVertiQuery + " GROUP BY (CASE WHEN TRAN_TYPE IN "
					+ "('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN "
					+ "('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' "
					+ "END),NEW_POS,MONTH ";
		} else if (docType.equalsIgnoreCase("TXPD")) {
			queryString = "WITH AT_GSTINVIEW AS (" + "SELECT HDR.POS,"
					+ "IFNULL(HDR.DIFF_PERCENT,'') AS TRAN_TYPE,"
					+ "IFNULL(ITM.TAXABLE_VALUE,0) AS ACCESSABLE_AMT,"
					+ "IFNULL(ITM.IGST_AMT ,0) AS IGST_AMT,"
					+ "IFNULL(ITM.CGST_AMT ,0) AS CGST_AMT,"
					+ "IFNULL(ITM.SGST_AMT ,0) AS SGST_AMT,"
					+ "IFNULL(ITM.CESS_AMT_SPECIFIC,0) + IFNULL(ITM.CESS_AMT_ADVALOREM,0) AS CESS_AMT "
					+ "FROM ANX_OUTWARD_DOC_HEADER_1A HDR INNER JOIN ANX_OUTWARD_DOC_ITEM_1A ITM ON HDR.ID=ITM.DOC_HEADER_ID WHERE ASP_INVOICE_STATUS = 2 "
					+ "AND COMPLIANCE_APPLICABLE = TRUE AND IS_DELETE = FALSE AND HDR.TAX_DOC_TYPE IN ('TXP')"
					+ buildTransQuery
					+ " UNION ALL SELECT NEW_POS AS POS,(CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END) TRAN_TYPE,"
					+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS ACCESSABLE_AMT,"
					+ "IFNULL(SUM(IGST_AMT),0) IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0) SGST_AMT,IFNULL(SUM(CESS_AMT),0) CESS_AMT "
					+ "FROM GSTR1A_PROCESSED_ADV_ADJUSTMENT WHERE IS_DELETE = FALSE AND IS_AMENDMENT=FALSE"
					+ buildVertiQuery
					+ "GROUP BY (CASE WHEN TRAN_TYPE IN ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END),NEW_POS"
					+ ")"
					+ "SELECT POS,TRAN_TYPE,'' AS TAX_RATE,IFNULL(SUM(ACCESSABLE_AMT),0) AS ACCESSABLE_AMT,IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
					+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,IFNULL(SUM(CESS_AMT),0) AS CESS_AMT FROM AT_GSTINVIEW "
					+ "GROUP BY POS,TRAN_TYPE";
		} else if (docType.equalsIgnoreCase("TXPDA")) {
			queryString = "SELECT   NEW_POS AS POS, (CASE WHEN TRAN_TYPE IN "
					+ "('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE IN"
					+ " ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' END)"
					+ " TRAN_TYPE, '' NEW_RATE,"
					+ " IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS ACCESSABLE_AMT, "
					+ "IFNULL(SUM(IGST_AMT),0)IGST_AMT,IFNULL(SUM(CGST_AMT),0)CGST_AMT,"
					+ " IFNULL(SUM(SGST_AMT),0)SGST_AMT,IFNULL(SUM(CESS_AMT),0)CESS_AMT "
					+ " FROM GSTR1A_PROCESSED_ADV_ADJUSTMENT  "
					+ " WHERE IS_DELETE=FALSE AND IS_AMENDMENT=TRUE  "
					+ buildVertiQuery + " GROUP BY (CASE WHEN TRAN_TYPE IN"
					+ " ('ZL65','L65','zl65','l65','zL65','Zl65') THEN 'L65' WHEN (TRAN_TYPE "
					+ "IN ('Z','N','','z','n') OR TRAN_TYPE IS NULL) THEN 'N' "
					+ "END),NEW_POS,MONTH ";
		} else {
			queryString = null;
		}
		return queryString;
	}
	
	@Override
	public String createGstr1aVeriticalQueryString(String buildQuery,
			String docType) {
		String queryString = null;
		if (docType.equalsIgnoreCase("AT")) {
			queryString = createGstr1aATVerticalQueryString(buildQuery);
		} else if (docType.equalsIgnoreCase("ATA")) {
			queryString = createGstr1aATAVerticalQueryString(buildQuery);
		} else if (docType.equalsIgnoreCase("TXPD")) {
			queryString = createGstr1aTXPDVerticalQueryString(buildQuery);
		} else if (docType.equalsIgnoreCase("TXPDA")) {
			queryString = createGstr1aTXPDAVerticalQueryString(buildQuery);
		} else {
			queryString = null;
		}
		return queryString;
	}
	
	public String createGstr1aATVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical AT  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,"
				+ "SUM(IGST_AMT)IGST_AMT,SUM(CGST_AMT)CGST_AMT,"
				+ "SUM(SGST_AMT)SGST_AMT,SUM(CESS_AMT)CESS_AMT,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,"
				+ "USERACCESS1,USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID FROM ("
				+ " SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) AS NEW_TAXABLE_VALUE,"
				+ "IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID FROM GSTR1A_PROCESSED_ADV_RECEIVED "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = FALSE "
				+ buildQuery
				+ "GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,PROFIT_CENTRE,PLANT_CODE,"
				+ "DIVISION,LOCATION,SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,"
				+ "USERACCESS1,USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID ) "
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID " + " ORDER BY ID DESC ";
		return queryString;
	}

	public String createGstr1aATAVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical ATA  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,"
				+ "SUM(IGST_AMT)IGST_AMT,SUM(CGST_AMT)CGST_AMT,"
				+ "SUM(SGST_AMT)SGST_AMT,SUM(CESS_AMT)CESS_AMT,PROFIT_CENTRE,"
				+ "PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE,"
				+ "SUM(ORG_TAXABLE_VALUE)ORG_TAXABLE_VALUE FROM ( "
				+ "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_RECEIVED),0) "
				+ "AS NEW_TAXABLE_VALUE,IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE,"
				+ "IFNULL(SUM(ORG_GROSS_ADV_RECEIVED),0) AS ORG_TAXABLE_VALUE "
				+ " FROM GSTR1A_PROCESSED_ADV_RECEIVED "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = TRUE "
				+ buildQuery + " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID,"
				+ "MONTH,ORG_POS,ORG_RATE )"
				+ "GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,PROFIT_CENTRE,"
				+ "PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE "
				+ " ORDER BY ID DESC ";
		return queryString;
	}

	public String createGstr1aTXPDVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical TXPD  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,"
				+ "SUM(IGST_AMT)IGST_AMT,SUM(CGST_AMT)CGST_AMT,"
				+ "SUM(SGST_AMT)SGST_AMT,SUM(CESS_AMT)CESS_AMT,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID " + " FROM ( "
				+ "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS NEW_TAXABLE_VALUE,"
				+ "IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID"
				+ " FROM GSTR1A_PROCESSED_ADV_ADJUSTMENT "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = FALSE "
				+ buildQuery
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,PROFIT_CENTRE,PLANT_CODE,"
				+ "DIVISION,LOCATION,SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,"
				+ "USERACCESS1,USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,"
				+ "USERACCESS6,USERDEFINED_FIELD1,USERDEFINED_FIELD2,"
				+ "USERDEFINED_FIELD3,SUPPLIER_GSTIN,RETURN_PERIOD,ID )"
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID " + " ORDER BY ID DESC";
		return queryString;
	}

	public String createGstr1aTXPDAVerticalQueryString(String buildQuery) {
		LOGGER.debug("Vertical TXPDA  Query Execution BEGIN ");
		String queryString = "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "SUM(NEW_TAXABLE_VALUE)NEW_TAXABLE_VALUE,SUM(IGST_AMT)IGST_AMT,"
				+ "SUM(CGST_AMT)CGST_AMT,SUM(SGST_AMT)SGST_AMT,"
				+ "SUM(CESS_AMT)CESS_AMT,PROFIT_CENTRE,PLANT_CODE,DIVISION,"
				+ "LOCATION,SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID,"
				+ "MONTH,ORG_POS,ORG_RATE,SUM(ORG_TAXABLE_VALUE)ORG_TAXABLE_VALUE"
				+ " FROM ( " + "SELECT TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "IFNULL(SUM(NEW_GROSS_ADV_ADJUSTED),0) AS NEW_TAXABLE_VALUE,"
				+ "IFNULL(SUM(IGST_AMT),0) AS IGST_AMT,"
				+ "IFNULL(SUM(CGST_AMT),0) AS CGST_AMT,"
				+ "IFNULL(SUM(SGST_AMT),0) AS SGST_AMT,"
				+ "IFNULL(SUM(CESS_AMT),0) AS CESS_AMT ,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE,"
				+ "IFNULL(SUM(ORG_GROSS_ADV_ADJUSTED),0) AS ORG_TAXABLE_VALUE"
				+ " FROM GSTR1A_PROCESSED_ADV_ADJUSTMENT "
				+ " WHERE IS_DELETE = FALSE AND IS_AMENDMENT = TRUE "
				+ buildQuery + " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,"
				+ "SALES_ORGANIZATION,DISTRIBUTION_CHANNEL,USERACCESS1,"
				+ "USERACCESS2,USERACCESS3,USERACCESS4,USERACCESS5,USERACCESS6,"
				+ "USERDEFINED_FIELD1,USERDEFINED_FIELD2,USERDEFINED_FIELD3,"
				+ "SUPPLIER_GSTIN,RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE  ) "
				+ " GROUP BY TRAN_TYPE,NEW_POS,NEW_RATE,"
				+ "PROFIT_CENTRE,PLANT_CODE,DIVISION,LOCATION,SALES_ORGANIZATION,"
				+ "DISTRIBUTION_CHANNEL,USERACCESS1,USERACCESS2,USERACCESS3,"
				+ "USERACCESS4,USERACCESS5,USERACCESS6,USERDEFINED_FIELD1,"
				+ "USERDEFINED_FIELD2,USERDEFINED_FIELD3,SUPPLIER_GSTIN,"
				+ "RETURN_PERIOD,ID,MONTH,ORG_POS,ORG_RATE "
				+ " ORDER BY ID DESC";
		return queryString;
	}
}
